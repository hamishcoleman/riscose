.\" verbatim start and end macros.
.de Vb
.ft CW
.ps -1
.vs -1
.nf
.in +4n
.eo
..
.de Ve
.ft R
.ps
.vs
.fi
.in
.ec
..
.\"
.TH riscose 1
.\"
.SH NAME
.\"
.B riscose \(em emulate the
.SB RISC OS
.B execution environment
.\"
.SH SYNOPSIS
.\"
.B riscose
.RB [ -h
|
.B -V
|
.B -v
|
.B -D
.I n
|
.B -m
|
.B -u
|
.B -w
.IR kb ]
.I binary
.RI [ args...\& ]
.\"
.SH DESCRIPTION
.\"
.B riscose
is a
.SM "RISC OS"
emulator.
It treats
.I binary
as an
.SM ARM
executable suitable for execution on the Acorn
.SM "RISC OS"
operating system and either runs it, if the machine has an
.SM ARM
processor, or interprets its instructions.
Calls from
.I binary
to
.SM "RISC OS"
using
.SM SWI
instructions are intercepted by
.B riscose
and emulated using native code.  That is, no
.SM "RISC OS"
modules are used by
.BR riscose .
.P
.I binary
is assumed to be an application (FIXME: right term?) unless one of the
mutally-exclusive
.B -m
or
.B -u
options are given.
.I binary
sees
.I args...\&
as its command-line arguments.
.\"
.SH OPTIONS
.\"
.TP
.B -h
Give brief help on command-line options on stderr and exit.  Output is
similar to
.Vb
usage: riscose [options] binary args...
where options are:
    -h, --help        request this help text.
    -V, --version     display version and exit.
    -v, --verbose     verbose.
    -D, --debug=n     turn on debug flags `n', where n is a combination of
            1 o -- pool memory routines.
            2 m -- memory routines.
            4 h -- hash routines.
            8 f -- file handling routines.
        0x100 s -- swi calls.
    -m, --module      binary is a module.
    -u, --utility     binary is a utility.
    -w, --wimpslot=K  allocates K kilobytes for execution.
binary is the risc os executable to run.  args are its arguments.
.Ve
.TP
.B -V
Display version on stderr and exit.  Please supply this with any bug
report.
.TP
.B -v
Be verbose.
.TP
.BI -D " n"
If debugging was enabled at compilation time set the debug flags
specified by
.I n
on.  See the output of your
.BR riscose 's
.B -h
option for their values.
.IP
Depending on the debug flags set various text will be written to stderr
and the actions of the program may change slightly.
For example, temporary files normally removed by
.B riscose
might be left behind.
Some of the debug flags can cause
.B large
amounts of output;  it is generally better to select the ones you
require instead of just turning them all on.
.IP
.I n
is either a sequence of mnemonic letters or a decimal, octal, or
hexadecimal integer depending on the prefix of none,
`\f(CW0\fP', or
`\f(CW0x\fP' respectively.
.TP
.B -m
.I binary
is a module.
.TP
.B -u
.I binary
is a utility.
.TP
.BI "-w " kb
Set wimpslot to
.I kb
kilobytes.  Default is 640.
.\"
.SH EXAMPLES
.\"
To use the
.SM "RISC OS"
program `riscosgrep' to search, case-insensitively, for `string'
through all C files.
.Vb
riscose riscosgrep -i string *.c
.Ve
.\"
.SH BUGS
.\"
Many.
.\"
.SH SEE ALSO
.\"
riscose project at SourceForge, http://riscose.sourceforge.net/.
arcem Archimedes hardware emulator, http://arcem.sourceforge.net/.
Red Squirrel Acorn hardware emulator, http://www.red-squirrel.org/.
