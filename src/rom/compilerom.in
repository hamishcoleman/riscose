#! @PERL@ -w

# compilerom
#
# (c) Matthew Bloch 2000
#
# See http://riscose.sourceforge.net/ for terms of distribution, and to
# pick up a later version of the software.
#
#   This script compiles the romimage file, which is mapped into the ARM's 
#   memory at 0x3800000.  It also makes up the "rom.h" include file which
#   SWI emulations can use to refer to error messages and other fixed
#   resources in ROM when passing results back from SWIs.

use strict;
use warnings;

my $l;

open ROM, ">romimage" or die "Couldn't open romimage for output";
open ROMHDR, ">rom.h" or die "Couldn't open rom.h for output";
print ROMHDR "/* Automatically generated file; do not edit manually */\n\n";
print ROMHDR "#include \"mem.h\"\n";
print ROMHDR "#include \"os.h\"\n";

sub rom_align {
  # Align next write into ROM to word boundary
  my $pos = tell ROM;
  return if !($pos &= 3);
  print ROM "\0"x(4-$pos);
}

sub rom_current {
  return tell(ROM) + 0x3800000;
}

#
# Compile list of errors
#
@ARGV == 1 or die "usage: $0 error_list_file";
open ERRORS, $ARGV[0] or die "Couldn't find $ARGV[0] file";
$l=0; while (<ERRORS>)
{
  $l++;
  next if /^(\n|\#)/;
  die "Bad format in error.list at line $l"
    if ! /^(ERROR)\s+(\S*)\s+([0-9a-fA-F]*)\s+(.*)\n/ &&
       ! /^(STRING)\s+(\S*)\s+(.+)\n/ &&
       ! /^(WORD)\s+(\S*)\s+([0-9a-fA-F]*)\n/;
  
  if ($1 eq "ERROR") {
    &rom_align;
    print ROMHDR sprintf("static os_error* ERR_%s(void)  __attribute__ ((unused));\n", uc $2);
    print ROMHDR sprintf("static os_error* ERR_%s(void)  { return (os_error *) MEM_TOHOST(0x%08x); }\n", uc $2, &rom_current);
    print ROM pack("L", hex $3).$4."\0";
  } elsif ($1 eq "WORD") {
    &rom_align;
    print ROMHDR sprintf("#define WORD_%s 0x%08x\n", uc $2, &rom_current);
    print ROM pack("L", hex $3);
  } elsif ($1 eq "STRING") {
    print ROMHDR sprintf("#define STRING_%s 0x%08x\n", uc $2, &rom_current);
    print ROM "$3".chr(0);
  } else {
    die "Bad data type $1 at line $l\n";
  }
}
close ERRORS;

close ROM;
close ROMHDR;
