                                     Sleeve

                     A simple ARM instruction core emulator

                   (c) 2000 Chris Rutter <chris@armlinux.org>

-- What and why?

  As part of my project to construct a high-level emulation of RISC OS, I
  needed an ARM instruction set emulator for when we're operating on non-ARM
  architectures.

  There are many of these about: Swarm, ARMulator, ARMphetamine; however, they
  are all far too complex.  They support features such as accurate memory
  management and cache line emulation -- even cycle-accurate emulation.  All
  that's needed in the case of executing RISC OS applications is a very basic
  implementation of the instruction set; we can ignore modes, caches, and
  operate in only 26-bit little endian mode.  Furthermore, we have slightly
  peculiar memory requirements: we wish to cope with bizarrities like MITSHM
  areas within our ARM memory map, and to be able to directly access malloced
  areas.

-- Architecture

  The majority of the work's done in arm.c, apart from block data transfer
  instructions, whose code gets generated by genbdt.c, and put in bdt.c.

  The emulator's supposed to be fully portable to any compiler with a type
  of at least 32 bits' width, and an 8-bit `unsigned char' type, so long as
  unaligned reads of values can be performed (e.g. reading the upper 32 bits
  of a 64-bit-wide word).  This is currently broken, mainly by bdt.c, and by
  the bizarre duplication of the memory access macros between arm.h and mm.h;
  it will be rectified soon.

  mm.c and mm.h comprise the memory interface for the emulator; in theory
  no one should stray beyond the published interface of the functions
  declared in mm.h, but a number of the current optimisations (such as the
  contents of bdt.c) unfortunately do, and assume `arm_word' is exactly 32
  bits wide, and that all memory is contiguous from the transfer base, and
  so on.  mm.h also supports a number of bizarro memory access methods which
  are at odds with the ones in arm.h: this will be rectified, with a full
  rationalisation of our portability goals.

-- Building

  You'll need Mark Wooding's mLib library to build sleeve.  Fetch it from
  his web site, at <http://www.excessus.demon.co.uk/misc-hacks/#mLib>.

-- Contact

  Contact me at <chris@armlinux.org>.  You can also check out sleeve's web
  site at <http://www.armlinux.org/projects/sleeve/>.
